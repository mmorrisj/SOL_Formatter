{
  "document": {
    "title": "2023 Mathematics Standards of Learning",
    "grade_level": "High School",
    "course_name": "Discrete Mathematics",
    "year": 2023,
    "introduction": "The following standards outline the content of a one-year course in Discrete Mathematics. If a one-semester course is desired, the standards with a dagger (†) would apply. Discrete Mathematics may be described as the study of mathematical properties of sets and systems that have a countable (discrete) number of elements. With the advent of modern technology, discrete (discontinuous) models have become as important as continuous models. In this course, the main focus is problem solving in a discrete setting. Techniques that are not considered in the current traditional courses of algebra, geometry, and calculus will be utilized. As students solve problems, they will analyze and determine whether a solution exists (existence problems), investigate how many solutions exist (counting problems), and focus on finding the best solution (optimization problems). Connections will be made to other disciplines. The importance of discrete mathematics has been influenced by technology. Technology tools will be used to assist in teaching and learning. Graphing technologies facilitate visualizing, analyzing, and understanding algebraic and statistical behaviors and provide a powerful tool for solving and verifying solutions.",
    "strands": [
      {
        "code": "LR",
        "name": "Logical Reasoning",
        "standards": [
          {
            "id": "DM.LR.1†",
            "statement": "The student will use reasoning to develop and apply logical arguments.",
            "knowledge_and_skills": {
              "objectives": [
                {
                  "text": "Use Venn diagrams to codify and solve logic problems.",
                  "action_verb": "Use",
                  "examples": [],
                  "constraints": []
                },
                {
                  "text": "Express logical statements in symbolic form.",
                  "action_verb": "Express",
                  "examples": [],
                  "constraints": []
                },
                {
                  "text": "Represent a conditional statement as its converse, inverse, and contrapositive.",
                  "action_verb": "Represent",
                  "examples": [],
                  "constraints": []
                },
                {
                  "text": "Describe how symbolic logic can be used to map the processes of computer applications.",
                  "action_verb": "Describe",
                  "examples": [],
                  "constraints": []
                },
                {
                  "text": "Construct a truth table to display all possible input combinations and their outputs.",
                  "action_verb": "Construct",
                  "examples": [],
                  "constraints": []
                },
                {
                  "text": "Identify the rules of inference and model basic logical statements including De Morgan’s Law.",
                  "action_verb": "Identify",
                  "examples": [],
                  "constraints": []
                },
                {
                  "text": "Apply logical reasoning to model contextual situations and make decisions.",
                  "action_verb": "Apply",
                  "examples": [],
                  "constraints": []
                }
              ]
            }
          },
          {
            "id": "DM.LR.2†",
            "statement": "The student will apply logic and proof techniques in the construction of a sound argument.",
            "knowledge_and_skills": {
              "objectives": [
                {
                  "text": "Apply informal logical reasoning to contextual problems (e.g., predicting the behavior of software, solving puzzles).",
                  "action_verb": "Apply",
                  "examples": [
                    "predicting the behavior of software",
                    "solving puzzles"
                  ],
                  "constraints": []
                },
                {
                  "text": "Outline the basic structure of a proof technique (e.g., direct proof, proof by contradiction, induction).",
                  "action_verb": "Outline",
                  "examples": [
                    "direct proof",
                    "proof by contradiction",
                    "induction"
                  ],
                  "constraints": []
                },
                {
                  "text": "Deduce the best type of proof for a given problem.",
                  "action_verb": "Deduce",
                  "examples": [],
                  "constraints": []
                },
                {
                  "text": "Use the rules of inference to construct direct proofs and proofs by contradiction.",
                  "action_verb": "Use",
                  "examples": [],
                  "constraints": []
                },
                {
                  "text": "Construct induction proofs involving summations and inequalities.",
                  "action_verb": "Construct",
                  "examples": [],
                  "constraints": []
                },
                {
                  "text": "Use a truth table to prove the logical equivalence of statements.",
                  "action_verb": "Use",
                  "examples": [],
                  "constraints": []
                }
              ]
            }
          },
          {
            "id": "DM.LR.3†",
            "statement": "The student will apply Boolean algebra to represent and analyze the function of logical gates and circuits.",
            "knowledge_and_skills": {
              "objectives": [
                {
                  "text": "Explain basic properties of Boolean algebra: duality, complements, and standard forms.",
                  "action_verb": "Explain",
                  "examples": [
                    "duality",
                    "complements",
                    "standard forms"
                  ],
                  "constraints": []
                },
                {
                  "text": "Represent verbal statements as Boolean expressions.",
                  "action_verb": "Represent",
                  "examples": [],
                  "constraints": []
                },
                {
                  "text": "Apply Boolean algebra to prove identities and simplify expressions.",
                  "action_verb": "Apply",
                  "examples": [],
                  "constraints": []
                },
                {
                  "text": "Generate truth tables that encode the truth and falsity of two or more statements.",
                  "action_verb": "Generate",
                  "examples": [],
                  "constraints": []
                },
                {
                  "text": "Explain the operation of discrete logic gates.",
                  "action_verb": "Explain",
                  "examples": [],
                  "constraints": []
                },
                {
                  "text": "Describe the relationship between Boolean algebra and electronic circuits.",
                  "action_verb": "Describe",
                  "examples": [],
                  "constraints": []
                },
                {
                  "text": "Analyze a combinational network using Boolean expressions.",
                  "action_verb": "Analyze",
                  "examples": [],
                  "constraints": []
                },
                {
                  "text": "Design simple combinational networks that use NAND (AND followed by NOT), NOR (OR followed by NOT), and XOR (exclusive-OR) gates.",
                  "action_verb": "Design",
                  "examples": [
                    "NAND",
                    "NOR",
                    "XOR"
                  ],
                  "constraints": []
                }
              ]
            }
          },
          {
            "id": "DM.LR.4",
            "statement": "The student will use mathematical induction to prove formulas and mathematical statements.",
            "knowledge_and_skills": {
              "objectives": [
                {
                  "text": "Compare and contrast inductive and deductive reasoning.",
                  "action_verb": "Compare",
                  "examples": [],
                  "constraints": []
                },
                {
                  "text": "Explain the relationship between weak and strong induction.",
                  "action_verb": "Explain",
                  "examples": [],
                  "constraints": []
                },
                {
                  "text": "Construct induction proofs involving a divisibility argument.",
                  "action_verb": "Construct",
                  "examples": [],
                  "constraints": []
                },
                {
                  "text": "Prove the Binomial Theorem through mathematical induction.",
                  "action_verb": "Prove",
                  "examples": [],
                  "constraints": []
                }
              ]
            }
          }
        ]
      },
      {
        "code": "SNT",
        "name": "Set and Number Theory",
        "standards": [
          {
            "id": "DM.SNT.1†",
            "statement": "The student will identify and use the properties of sets and set operations.",
            "knowledge_and_skills": {
              "objectives": [
                {
                  "text": "Compare and contrast sets, relations, and functions.",
                  "action_verb": "Compare",
                  "examples": [],
                  "constraints": []
                },
                {
                  "text": "Express relationships between sets using Venn diagrams.",
                  "action_verb": "Express",
                  "examples": [],
                  "constraints": []
                },
                {
                  "text": "Describe a set using set-builder notation.",
                  "action_verb": "Describe",
                  "examples": [],
                  "constraints": []
                },
                {
                  "text": "Construct new sets using the set operations intersection, union, difference, and complement.",
                  "action_verb": "Construct",
                  "examples": [
                    "intersection",
                    "union",
                    "difference",
                    "complement"
                  ],
                  "constraints": []
                },
                {
                  "text": "Identify the laws of set theory (e.g., associative, commutative, distributive, De Morgan’s Law).",
                  "action_verb": "Identify",
                  "examples": [
                    "associative",
                    "commutative",
                    "distributive",
                    "De Morgan’s Law"
                  ],
                  "constraints": []
                },
                {
                  "text": "Use the principle of inclusion and exclusion to determine the size of a set.",
                  "action_verb": "Use",
                  "examples": [],
                  "constraints": []
                },
                {
                  "text": "Use the properties of set operations to prove set equality.",
                  "action_verb": "Use",
                  "examples": [],
                  "constraints": []
                }
              ]
            }
          },
          {
            "id": "DM.SNT.2†",
            "statement": "The student will apply the formulas of combinatorics.",
            "knowledge_and_skills": {
              "objectives": [
                {
                  "text": "Create a tree diagram to represent relationships between independent events.",
                  "action_verb": "Create",
                  "examples": [],
                  "constraints": []
                },
                {
                  "text": "Use the Fundamental (Basic) Counting Principle to determine the number of possible outcomes of an event.",
                  "action_verb": "Use",
                  "examples": [],
                  "constraints": []
                },
                {
                  "text": "Determine the number of combinations possible when subsets of r elements are selected from a set of n elements without regard to order.",
                  "action_verb": "Determine",
                  "examples": [],
                  "constraints": []
                },
                {
                  "text": "Determine the number of permutations possible when r objects selected from n objects are ordered.",
                  "action_verb": "Determine",
                  "examples": [],
                  "constraints": []
                },
                {
                  "text": "Use the pigeonhole principle to solve packing problems to facilitate proofs.",
                  "action_verb": "Use",
                  "examples": [],
                  "constraints": []
                },
                {
                  "text": "Construct a proof by induction using principles of combinatorics.",
                  "action_verb": "Construct",
                  "examples": [],
                  "constraints": []
                }
              ]
            }
          },
          {
            "id": "DM.SNT.3",
            "statement": "The student will use Pascal’s Triangle to analyze numerical patterns and relationships.",
            "knowledge_and_skills": {
              "objectives": [
                {
                  "text": "Construct Pascal’s Triangle.",
                  "action_verb": "Construct",
                  "examples": [],
                  "constraints": []
                },
                {
                  "text": "Expand binomials having positive integral exponents, using the Binomial Theorem and Pascal’s Triangle.",
                  "action_verb": "Expand",
                  "examples": [],
                  "constraints": []
                },
                {
                  "text": "Compare the binomial coefficient to the calculation of combinations.",
                  "action_verb": "Compare",
                  "examples": [],
                  "constraints": []
                },
                {
                  "text": "Identify the Fibonacci numbers within Pascal’s Triangle.",
                  "action_verb": "Identify",
                  "examples": [],
                  "constraints": []
                }
              ]
            }
          }
        ]
      },
      {
        "code": "GT",
        "name": "Graph Theory",
        "standards": [
          {
            "id": "DM.GT.1†",
            "statement": "The student will represent problems using vertex-edge graphs. The concepts of degree, connectedness, paths, planarity, and directed graphs will be analyzed.",
            "knowledge_and_skills": {
              "objectives": [
                {
                  "text": "Illustrate the basic terminology of graph theory (e.g., vertex, edge, graph, degree of a vertex).",
                  "action_verb": "Illustrate",
                  "examples": [
                    "vertex",
                    "edge",
                    "graph",
                    "degree of a vertex"
                  ],
                  "constraints": []
                },
                {
                  "text": "Use graphs to map situations in which the vertices represent objects, and edges represent a particular relationship between objects.",
                  "action_verb": "Use",
                  "examples": [],
                  "constraints": []
                },
                {
                  "text": "Identify and describe degree and connectedness.",
                  "action_verb": "Identify",
                  "examples": [],
                  "constraints": []
                },
                {
                  "text": "Determine whether a graph is planar or nonplanar.",
                  "action_verb": "Determine",
                  "examples": [],
                  "constraints": []
                },
                {
                  "text": "Analyze the relationship between faces, edges, and vertices using Euler’s formula (F = E – V + 2).",
                  "action_verb": "Analyze",
                  "examples": [],
                  "constraints": []
                },
                {
                  "text": "Use directed graphs (digraphs) to represent situations with restrictions in traversal possibilities.",
                  "action_verb": "Use",
                  "examples": [],
                  "constraints": []
                },
                {
                  "text": "Determine when graphs are trees.",
                  "action_verb": "Determine",
                  "examples": [],
                  "constraints": []
                }
              ]
            }
          },
          {
            "id": "DM.GT.2†",
            "statement": "The student will solve problems through analysis and application of circuits, cycles, Euler paths, Euler circuits, Hamilton paths, and Hamilton circuits. Optimal solutions will be determined using existing algorithms and student-created algorithms.",
            "knowledge_and_skills": {
              "objectives": [
                {
                  "text": "Determine whether a graph has an Euler circuit or path, and determine the circuit or path, if it exists.",
                  "action_verb": "Determine",
                  "examples": [],
                  "constraints": []
                },
                {
                  "text": "Determine whether a graph has a Hamilton circuit or path, and determine the circuit or path, if it exists.",
                  "action_verb": "Determine",
                  "examples": [],
                  "constraints": []
                },
                {
                  "text": "Count the number of Hamilton circuits for a complete graph with n vertices.",
                  "action_verb": "Count",
                  "examples": [],
                  "constraints": []
                },
                {
                  "text": "Use an Euler circuit algorithm to solve optimization problems.",
                  "action_verb": "Use",
                  "examples": [],
                  "constraints": []
                }
              ]
            }
          },
          {
            "id": "DM.GT.3†",
            "statement": "The student will apply graphs to conflict-resolution problems, such as graph coloring, scheduling, matching, and optimization.",
            "knowledge_and_skills": {
              "objectives": [
                {
                  "text": "Model projects consisting of several subtasks, using a graph.",
                  "action_verb": "Model",
                  "examples": [],
                  "constraints": []
                },
                {
                  "text": "Use graphs to resolve conflicts that arise in scheduling.",
                  "action_verb": "Use",
                  "examples": [],
                  "constraints": []
                },
                {
                  "text": "Use graph coloring to determine the chromatic number of a graph.",
                  "action_verb": "Use",
                  "examples": [],
                  "constraints": []
                }
              ]
            }
          },
          {
            "id": "DM.GT.4",
            "statement": "The student will recognize and apply algorithms to solve configuration, conflict-resolution, and sorting problems.",
            "knowledge_and_skills": {
              "objectives": [
                {
                  "text": "Recognize algorithms such as nearest neighbor, brute force, and cheapest link as they apply to graphs.",
                  "action_verb": "Recognize",
                  "examples": [
                    "nearest neighbor",
                    "brute force",
                    "cheapest link"
                  ],
                  "constraints": []
                },
                {
                  "text": "Use Kruskal’s algorithm to determine the shortest spanning tree of a connected graph.",
                  "action_verb": "Use",
                  "examples": [
                    "Kruskal’s algorithm"
                  ],
                  "constraints": []
                },
                {
                  "text": "Use Prim’s algorithm to determine the shortest spanning tree of a connected graph.",
                  "action_verb": "Use",
                  "examples": [
                    "Prim’s algorithm"
                  ],
                  "constraints": []
                },
                {
                  "text": "Use Dijkstra’s algorithm to determine the shortest spanning tree of a connected graph.",
                  "action_verb": "Use",
                  "examples": [
                    "Dijkstra’s algorithm"
                  ],
                  "constraints": []
                }
              ]
            }
          },
          {
            "id": "DM.GT.5",
            "statement": "The student will use algorithms to schedule tasks to determine a minimum project time.",
            "knowledge_and_skills": {
              "objectives": [
                {
                  "text": "Specify in a digraph the order in which tests are to be performed.",
                  "action_verb": "Specify",
                  "examples": [],
                  "constraints": []
                },
                {
                  "text": "Identify the critical path to determine the earliest completion time (minimum project time).",
                  "action_verb": "Identify",
                  "examples": [],
                  "constraints": []
                },
                {
                  "text": "Use the list-processing algorithm to determine an optimal schedule.",
                  "action_verb": "Use",
                  "examples": [
                    "list-processing algorithm"
                  ],
                  "constraints": []
                },
                {
                  "text": "Create and test scheduling algorithms.",
                  "action_verb": "Create",
                  "examples": [],
                  "constraints": []
                }
              ]
            }
          }
        ]
      },
      {
        "code": "CM",
        "name": "Computational Methods",
        "standards": [
          {
            "id": "DM.CM.1†",
            "statement": "The student will describe and apply sorting and searching algorithms used in processing and communicating information.",
            "knowledge_and_skills": {
              "objectives": [
                {
                  "text": "Select and apply a sorting algorithm, such as a bubble sort, merge sort, or network sort.",
                  "action_verb": "Select",
                  "examples": [
                    "bubble sort",
                    "merge sort",
                    "network sort"
                  ],
                  "constraints": []
                },
                {
                  "text": "Describe the advantages and disadvantages of various sorting algorithms.",
                  "action_verb": "Describe",
                  "examples": [],
                  "constraints": []
                },
                {
                  "text": "Analyze the knapsack and bin-packing problems.",
                  "action_verb": "Analyze",
                  "examples": [
                    "knapsack problem",
                    "bin-packing problem"
                  ],
                  "constraints": []
                },
                {
                  "text": "Select and apply search algorithms to analyze problems.",
                  "action_verb": "Select",
                  "examples": [],
                  "constraints": []
                },
                {
                  "text": "Determine the average, best-case, and worst-case reasoning for different searches.",
                  "action_verb": "Determine",
                  "examples": [],
                  "constraints": []
                }
              ]
            }
          },
          {
            "id": "DM.CM.2†",
            "statement": "The student will use recursive processes.",
            "knowledge_and_skills": {
              "objectives": [
                {
                  "text": "Compare and contrast iterative and recursive processes.",
                  "action_verb": "Compare",
                  "examples": [],
                  "constraints": []
                },
                {
                  "text": "Use recursive processes to model growth and decay.",
                  "action_verb": "Use",
                  "examples": [],
                  "constraints": []
                },
                {
                  "text": "Use recursive processes to create fractals.",
                  "action_verb": "Use",
                  "examples": [],
                  "constraints": []
                },
                {
                  "text": "Use recursive processes to generate the Fibonacci sequence.",
                  "action_verb": "Use",
                  "examples": [],
                  "constraints": []
                },
                {
                  "text": "Determine if a recursive solution is more efficient than an iterative solution.",
                  "action_verb": "Determine",
                  "examples": [],
                  "constraints": []
                }
              ]
            }
          },
          {
            "id": "DM.CM.3",
            "statement": "The student will identify and apply cryptographic methods.",
            "knowledge_and_skills": {
              "objectives": [
                {
                  "text": "Compare and contrast ciphers and codes.",
                  "action_verb": "Compare",
                  "examples": [],
                  "constraints": []
                },
                {
                  "text": "Describe the evolution of cipher systems.",
                  "action_verb": "Describe",
                  "examples": [],
                  "constraints": []
                },
                {
                  "text": "Identify the Fundamental Theorem of Arithmetic.",
                  "action_verb": "Identify",
                  "examples": [],
                  "constraints": []
                },
                {
                  "text": "Describe how the complexity of prime factorization is used in cryptography.",
                  "action_verb": "Describe",
                  "examples": [],
                  "constraints": []
                },
                {
                  "text": "Describe modular arithmetic in context (e.g., clocks, days of the week, measures of time).",
                  "action_verb": "Describe",
                  "examples": [
                    "clocks",
                    "days of the week",
                    "measures of time"
                  ],
                  "constraints": []
                },
                {
                  "text": "Analyze the relationship between divisibility and modulus.",
                  "action_verb": "Analyze",
                  "examples": [],
                  "constraints": []
                },
                {
                  "text": "Determine congruence within modular arithmetic.",
                  "action_verb": "Determine",
                  "examples": [],
                  "constraints": []
                },
                {
                  "text": "Perform operations within modular arithmetic.",
                  "action_verb": "Perform",
                  "examples": [],
                  "constraints": []
                },
                {
                  "text": "Apply modular arithmetic to problems in context (e.g., cryptography, International Standard Book Number (ISBN), International Bank Account Number (IBAN)).",
                  "action_verb": "Apply",
                  "examples": [
                    "cryptography",
                    "ISBN",
                    "IBAN"
                  ],
                  "constraints": []
                }
              ]
            }
          },
          {
            "id": "DM.CM.4",
            "statement": "The student will analyze the limitations of algorithms and their contextual relationships in computing.",
            "knowledge_and_skills": {
              "objectives": [
                {
                  "text": "Describe maximum complexity of an algorithm using Big O notation.",
                  "action_verb": "Describe",
                  "examples": [],
                  "constraints": []
                },
                {
                  "text": "Describe Turing machines and how they are used to test the limits of computation.",
                  "action_verb": "Describe",
                  "examples": [],
                  "constraints": []
                },
                {
                  "text": "Describe the halting problem and explain how it characterizes the fundamental limitations of computation and undecidability.",
                  "action_verb": "Describe",
                  "examples": [],
                  "constraints": []
                },
                {
                  "text": "Explain the P versus NP problem and defend a justification for equality, inequality, or undecidability.",
                  "action_verb": "Explain",
                  "examples": [],
                  "constraints": []
                },
                {
                  "text": "Analyze how the equivalence of P- and NP-class problems might impact society.",
                  "action_verb": "Analyze",
                  "examples": [],
                  "constraints": []
                }
              ]
            }
          }
        ]
      }
    ]
  },
  "_extraction_metadata": {
    "source_file": "16-DiscreteMath-Understanding the Standards.docx",
    "model": "gpt-4o-mini",
    "temperature": 0.1,
    "tokens_used": 13707,
    "prompt_tokens": 8588,
    "completion_tokens": 5119
  }
}